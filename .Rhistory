names(precision_p1)[5]<-c("Arbol de clasificación")
tree21 = tree(calificacion~., data = Train1.notas_m)
summary(tree21)
plot(tree21)
text(tree21, pretty = 1)
predicedtree = predict(tree21, Val1.notas_m, type="class")
matriztree21<-confusionMatrix(Val1.notas_m$calificacion, predicedtree)
matriztree21
cv.tree21 = cv.tree(tree21, FUN = prune.misclass)
plot(cv.tree21)
prune.tree21 = prune.misclass(tree21, best = 5)
plot(prune.tree21)
text(prune.tree21, pretty=0)
predicedtree22 = predict(prune.tree21, Val1.notas_m, type="class")
matriztree22<-confusionMatrix(Val1.notas_m$calificacion, predicedtree22)
matriztree22
precision_m1<-c(precision_m1, matriztree22$overall[1])
names(precision_m1)[5]<-c("Arbol de clasificación")
gfit1=glm(calificacion~., data=notas_p[,!(names(notas_p) %in% c("G2", "G3"))], family=binomial)
summary(gfit1)
gfit12=glm(calificacion~., data=Train2.notas_p, family=binomial)
cbind(gfit1$coefficients, gfit12$coefficients)
p=predict(gfit12, Val2.notas_p, type="response")
PredCalificacion=as.factor(p>0.5)
levels(PredCalificacion)=c("aprobado", "suspenso")
matrizLogis<-confusionMatrix(Val2.notas_p$calificacion, PredCalificacion)
matrizLogis
precision_p2<-c(matrizLogis$overall[1])
names(precision_p2)<-c("Regresion Logistica")
test_prob = predict(gfit12, newdata = Val2.notas_p, type = "response")
test_roc = roc(Val2.notas_p$calificacion ~ test_prob, plot = TRUE, print.auc = TRUE)
gfit2=glm(calificacion~., data=notas_m[,!(names(notas_m) %in% c("G2", "G3"))], family=binomial)
summary(gfit2)
gfit21=glm(calificacion~., data=Train2.notas_m, family=binomial)
cbind(gfit1$coefficients, gfit21$coefficients)
p=predict(gfit21, Val2.notas_m, type="response")
PredCalificacion=as.factor(p>0.5)
levels(PredCalificacion)=c("aprobado", "suspenso")
matrizLogis<-confusionMatrix(Val2.notas_m$calificacion, PredCalificacion)
matrizLogis
precision_m2<-c(matrizLogis$overall[1])
names(precision_m2)<-c("Regresion Logistica")
test_prob = predict(gfit21, newdata = Val2.notas_m, type = "response")
test_roc = roc(Val2.notas_m$calificacion ~ test_prob, plot = TRUE, print.auc = TRUE)
Train=data.frame(Train2.notas_p$calificacion,model.matrix(calificacion~., data=Train2.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn1=neuralnet(calificacion ~., data=Train, hidden=5, act.fct = "logistic", linear.output = FALSE)
plot(nn1)
Validate=data.frame(Val2.notas_p$calificacion,model.matrix(calificacion~., data=Val2.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn1,Validate)
predictedNN1=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN1<-confusionMatrix(Val2.notas_p$calificacion, predictedNN1)
matrizNN1
precisionNN_p<-c(matrizNN1$overall[1])
Train=data.frame(Train2.notas_p$calificacion,model.matrix(calificacion~., data=Train2.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn1=neuralnet(calificacion ~., data=Train, hidden=10, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val2.notas_p$calificacion,model.matrix(calificacion~., data=Val2.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn1,Validate)
predictedNN1=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN1<-confusionMatrix(Val2.notas_p$calificacion, predictedNN1)
precisionNN_p<-c(precisionNN_p, matrizNN1$overall[1])
Train=data.frame(Train2.notas_p$calificacion,model.matrix(calificacion~., data=Train2.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn1=neuralnet(calificacion ~., data=Train, hidden=15, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val2.notas_p$calificacion,model.matrix(calificacion~., data=Val2.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn1,Validate)
predictedNN1=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN1<-confusionMatrix(Val2.notas_p$calificacion, predictedNN1)
precisionNN_p<-c(precisionNN_p, matrizNN1$overall[1])
Train=data.frame(Train2.notas_p$calificacion,model.matrix(calificacion~., data=Train2.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn1=neuralnet(calificacion ~., data=Train, hidden=20, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val2.notas_p$calificacion,model.matrix(calificacion~., data=Val2.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn1,Validate)
predictedNN1=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN1<-confusionMatrix(Val2.notas_p$calificacion, predictedNN1)
precisionNN_p<-c(precisionNN_p, matrizNN1$overall[1])
names(precisionNN_p)<-c("5 neuronas", "10 neuronas", "15 neuronas", "20 neuronas")
precisionNN_p
Train=data.frame(Train2.notas_p$calificacion,model.matrix(calificacion~., data=Train2.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn12=neuralnet(calificacion ~., data=Train, hidden=c(10,5), act.fct = "logistic", linear.output = FALSE)
plot(nn12)
Validate=data.frame(Val2.notas_p$calificacion,model.matrix(calificacion~., data=Val2.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn12,Validate)
predictedNN12=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN12<-confusionMatrix(Val2.notas_p$calificacion, predictedNN12)
matrizNN12
precision_p2<-c(precision_p2, max(precisionNN_p))
names(precision_p2)[2]<-c("Redes Neuronales")
Train=data.frame(Train2.notas_m$calificacion,model.matrix(calificacion~., data=Train2.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn2=neuralnet(calificacion ~., data=Train, hidden=5, act.fct = "logistic", linear.output = FALSE)
plot(nn2)
Validate=data.frame(Val2.notas_m$calificacion,model.matrix(calificacion~., data=Val2.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn2,Validate)
predictedNN2=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN2<-confusionMatrix(Val2.notas_m$calificacion, predictedNN2)
matrizNN2
precisionNN_m<-c(matrizNN2$overall[1])
Train=data.frame(Train2.notas_m$calificacion,model.matrix(calificacion~., data=Train2.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn2=neuralnet(calificacion ~., data=Train, hidden=10, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val2.notas_m$calificacion,model.matrix(calificacion~., data=Val2.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn2,Validate)
predictedNN2=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN2<-confusionMatrix(Val2.notas_m$calificacion, predictedNN2)
precisionNN_m<-c(precisionNN_m, matrizNN2$overall[1])
Train=data.frame(Train2.notas_m$calificacion,model.matrix(calificacion~., data=Train2.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn2=neuralnet(calificacion ~., data=Train, hidden=15, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val2.notas_m$calificacion,model.matrix(calificacion~., data=Val2.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn2,Validate)
predictedNN2=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN2<-confusionMatrix(Val2.notas_m$calificacion, predictedNN2)
precisionNN_m<-c(precisionNN_m, matrizNN2$overall[1])
Train=data.frame(Train2.notas_m$calificacion,model.matrix(calificacion~., data=Train2.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn2=neuralnet(calificacion ~., data=Train, hidden=20, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val2.notas_m$calificacion,model.matrix(calificacion~., data=Val2.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn2,Validate)
predictedNN2=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN2<-confusionMatrix(Val2.notas_m$calificacion, predictedNN2)
precisionNN_m<-c(precisionNN_m, matrizNN2$overall[1])
names(precisionNN_m)<-c("5 neuronas", "10 neuronas", "15 neuronas", "20 neuronas")
precisionNN_m
Train=data.frame(Train2.notas_m$calificacion,model.matrix(calificacion~., data=Train2.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn21=neuralnet(calificacion ~., data=Train, hidden=c(5,5), act.fct = "logistic", linear.output = FALSE)
plot(nn21)
Validate=data.frame(Val2.notas_m$calificacion,model.matrix(calificacion~., data=Val2.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn21,Validate)
predictedNN21=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN21<-confusionMatrix(Val2.notas_m$calificacion, predictedNN21)
matrizNN21
precision_m2<-c(precision_m2, max(precisionNN_m))
names(precision_m2)[2]<-c("Redes Neuronales")
fitsvm11 <-svm(calificacion ~., data = Train2.notas_p)
summary(fitsvm11)
predictedSVM = predict(fitsvm11,Val2.notas_p)
matrizSVM11<-confusionMatrix(Val2.notas_p$calificacion, predictedSVM)
matrizSVM11
precisionSVM_p<-c(matrizSVM11$overall[1])
names(precisionSVM_p)<-c("radial")
fitsvm12 <-svm(calificacion ~., data = Train2.notas_p, kernel="polynomial")
summary(fitsvm12)
predictedSVM = predict(fitsvm12,Val2.notas_p)
matrizSVM12<-confusionMatrix(Val2.notas_p$calificacion, predictedSVM)
matrizSVM12
precisionSVM_p<-c(precisionSVM_p, matrizSVM12$overall[1])
names(precisionSVM_p)[2]<-c("polinomial")
fitsvm13 <-svm(calificacion ~., data = Train2.notas_p, kernel="sigmoid")
summary(fitsvm13)
predictedSVM = predict(fitsvm13,Val2.notas_p)
matrizSVM13<-confusionMatrix(Val2.notas_p$calificacion, predictedSVM)
matrizSVM13
precisionSVM_p<-c(precisionSVM_p, matrizSVM13$overall[1])
names(precisionSVM_p)[3]<-c("sigmoidal")
fitsvm14 <-svm(calificacion ~., data = Train2.notas_p, kernel="linear")
summary(fitsvm14)
predictedSVM = predict(fitsvm14,Val2.notas_p)
matrizSVM14<-confusionMatrix(Val2.notas_p$calificacion, predictedSVM)
matrizSVM14
precisionSVM_p<-c(precisionSVM_p, matrizSVM14$overall[1])
names(precisionSVM_p)[4]<-c("lineal")
precisionSVM_p
precision_p2<-c(precision_p2, max(precisionSVM_p))
names(precision_p2)[3]<-c("SVM")
fitsvm21 <-svm(calificacion ~., data = Train2.notas_m)
predictedSVM = predict(fitsvm21,Val2.notas_m)
matrizSVM21<-confusionMatrix(Val2.notas_m$calificacion, predictedSVM)
matrizSVM21
precisionSVM_m<-c(matrizSVM21$overall[1])
names(precisionSVM_m)<-c("radial")
fitsvm22 <-svm(calificacion ~., data = Train2.notas_m, kernel="polynomial")
predictedSVM = predict(fitsvm22,Val2.notas_m)
matrizSVM22<-confusionMatrix(Val2.notas_m$calificacion, predictedSVM)
matrizSVM22
precisionSVM_m<-c(precisionSVM_m, matrizSVM22$overall[1])
names(precisionSVM_m)[2]<-c("polinomial")
fitsvm23 <-svm(calificacion ~., data = Train2.notas_m, kernel="sigmoid")
predictedSVM = predict(fitsvm23,Val2.notas_m)
matrizSVM23<-confusionMatrix(Val2.notas_m$calificacion, predictedSVM)
matrizSVM23
precisionSVM_m<-c(precisionSVM_m, matrizSVM23$overall[1])
names(precisionSVM_m)[3]<-c("sigmoidal")
fitsvm24 <-svm(calificacion ~., data = Train2.notas_m, kernel="linear")
predictedSVM = predict(fitsvm24,Val2.notas_m)
matrizSVM24<-confusionMatrix(Val2.notas_m$calificacion, predictedSVM)
matrizSVM24
precisionSVM_m<-c(precisionSVM_m, matrizSVM24$overall[1])
names(precisionSVM_m)[4]<-c("lineal")
precisionSVM_m
precision_m2<-c(precision_m2, max(precisionSVM_m))
names(precision_m2)[3]<-c("SVM")
fitbayes1 <-naiveBayes(calificacion ~., data = Train2.notas_p)
predictedBayes= predict(fitbayes1,Val2.notas_p)
matrizNB1<-confusionMatrix(Val2.notas_p$calificacion, predictedBayes)
matrizNB1
precision_p2<-c(precision_p2, matrizNB1$overall[1])
names(precision_p2)[4]<-c("Naive Bayes")
fitbayes2 <-naiveBayes(calificacion ~., data = Train2.notas_m)
predictedBayes= predict(fitbayes2,Val2.notas_m)
matrizNB2<-confusionMatrix(Val2.notas_m$calificacion, predictedBayes)
matrizNB2
precision_m2<-c(precision_m2, matrizNB2$overall[1])
names(precision_m2)[4]<-c("Naive Bayes")
require(tree)
tree11 = tree(calificacion~., data = Train2.notas_p)
summary(tree11)
plot(tree11)
text(tree11, pretty = 1)
predicedtree = predict(tree11, Val2.notas_p, type="class")
matriztree11<-confusionMatrix(Val2.notas_p$calificacion, predicedtree)
matriztree11
cv.tree11 = cv.tree(tree11, FUN = prune.misclass)
plot(cv.tree11)
prune.tree11 = prune.misclass(tree11, best = 5)
plot(prune.tree11)
text(prune.tree11, pretty=0)
predicedtree12 = predict(prune.tree11, Val2.notas_p, type="class")
matriztree12<-confusionMatrix(Val2.notas_p$calificacion, predicedtree12)
matriztree12
precision_p2<-c(precision_p2, matriztree12$overall[1])
names(precision_p2)[5]<-c("Arbol de clasificación")
tree21 = tree(calificacion~., data = Train2.notas_m)
summary(tree21)
plot(tree21)
text(tree21, pretty = 1)
predicedtree = predict(tree21, Val2.notas_m, type="class")
matriztree21<-confusionMatrix(Val2.notas_m$calificacion, predicedtree)
matriztree21
cv.tree21 = cv.tree(tree21, FUN = prune.misclass)
plot(cv.tree21)
prune.tree21 = prune.misclass(tree21, best = 5)
plot(prune.tree21)
text(prune.tree21, pretty=0)
predicedtree22 = predict(prune.tree21, Val2.notas_m, type="class")
matriztree22<-confusionMatrix(Val2.notas_m$calificacion, predicedtree22)
matriztree22
precision_m2<-c(precision_m2, matriztree22$overall[1])
names(precision_m2)[5]<-c("Arbol de clasificación")
gfit1=glm(calificacion~., data=notas_p[,!(names(notas_p) %in% c("G3"))], family=binomial)
summary(gfit1)
gfit12=glm(calificacion~., data=Train3.notas_p, family=binomial)
cbind(gfit1$coefficients, gfit12$coefficients)
p=predict(gfit12, Val3.notas_p, type="response")
PredCalificacion=as.factor(p>0.5)
levels(PredCalificacion)=c("aprobado", "suspenso")
matrizLogis<-confusionMatrix(Val3.notas_p$calificacion, PredCalificacion)
matrizLogis
precision_p3<-c(matrizLogis$overall[1])
names(precision_p3)<-c("Regresion Logistica")
test_prob = predict(gfit12, newdata = Val3.notas_p, type = "response")
test_roc = roc(Val3.notas_p$calificacion ~ test_prob, plot = TRUE, print.auc = TRUE)
gfit2=glm(calificacion~., data=notas_m[,!(names(notas_m) %in% c("G3"))], family=binomial)
summary(gfit2)
gfit21=glm(calificacion~., data=Train3.notas_m, family=binomial)
cbind(gfit1$coefficients, gfit21$coefficients)
p=predict(gfit21, Val3.notas_m, type="response")
PredCalificacion=as.factor(p>0.5)
levels(PredCalificacion)=c("aprobado", "suspenso")
matrizLogis<-confusionMatrix(Val3.notas_m$calificacion, PredCalificacion)
matrizLogis
precision_m3<-c(matrizLogis$overall[1])
names(precision_m3)<-c("Regresion Logistica")
test_prob = predict(gfit21, newdata = Val3.notas_m, type = "response")
test_roc = roc(Val3.notas_m$calificacion ~ test_prob, plot = TRUE, print.auc = TRUE)
Train=data.frame(Train3.notas_p$calificacion,model.matrix(calificacion~., data=Train3.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn1=neuralnet(calificacion ~., data=Train, hidden=5, act.fct = "logistic", linear.output = FALSE)
plot(nn1)
Validate=data.frame(Val3.notas_p$calificacion,model.matrix(calificacion~., data=Val3.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn1,Validate)
predictedNN1=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN1<-confusionMatrix(Val3.notas_p$calificacion, predictedNN1)
matrizNN1
precisionNN_p<-c(matrizNN1$overall[1])
Train=data.frame(Train3.notas_p$calificacion,model.matrix(calificacion~., data=Train3.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn1=neuralnet(calificacion ~., data=Train, hidden=10, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val3.notas_p$calificacion,model.matrix(calificacion~., data=Val3.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn1,Validate)
predictedNN1=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN1<-confusionMatrix(Val3.notas_p$calificacion, predictedNN1)
precisionNN_p<-c(precisionNN_p, matrizNN1$overall[1])
Train=data.frame(Train3.notas_p$calificacion,model.matrix(calificacion~., data=Train3.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn1=neuralnet(calificacion ~., data=Train, hidden=15, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val3.notas_p$calificacion,model.matrix(calificacion~., data=Val3.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn1,Validate)
predictedNN1=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN1<-confusionMatrix(Val3.notas_p$calificacion, predictedNN1)
precisionNN_p<-c(precisionNN_p, matrizNN1$overall[1])
Train=data.frame(Train3.notas_p$calificacion,model.matrix(calificacion~., data=Train3.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn1=neuralnet(calificacion ~., data=Train, hidden=20, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val3.notas_p$calificacion,model.matrix(calificacion~., data=Val3.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn1,Validate)
predictedNN1=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN1<-confusionMatrix(Val3.notas_p$calificacion, predictedNN1)
precisionNN_p<-c(precisionNN_p, matrizNN1$overall[1])
names(precisionNN_p)<-c("5 neuronas", "10 neuronas", "15 neuronas", "20 neuronas")
precisionNN_p
Train=data.frame(Train3.notas_p$calificacion,model.matrix(calificacion~., data=Train3.notas_p)[,-1])
colnames(Train)[1]="calificacion"
nn12=neuralnet(calificacion ~., data=Train, hidden=c(5,3), act.fct = "logistic", linear.output = FALSE)
plot(nn12)
Validate=data.frame(Val3.notas_p$calificacion,model.matrix(calificacion~., data=Val3.notas_p)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn12,Validate)
predictedNN12=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN12<-confusionMatrix(Val3.notas_p$calificacion, predictedNN12)
matrizNN12
precision_p3<-c(precision_p3, max(precisionNN_p))
names(precision_p3)[2]<-c("Redes Neuronales")
Train=data.frame(Train3.notas_m$calificacion,model.matrix(calificacion~., data=Train3.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn2=neuralnet(calificacion ~., data=Train, hidden=5, act.fct = "logistic", linear.output = FALSE)
plot(nn2)
Validate=data.frame(Val3.notas_m$calificacion,model.matrix(calificacion~., data=Val3.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn2,Validate)
predictedNN2=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN2<-confusionMatrix(Val3.notas_m$calificacion, predictedNN2)
matrizNN2
precisionNN_m<-c(matrizNN2$overall[1])
Train=data.frame(Train3.notas_m$calificacion,model.matrix(calificacion~., data=Train3.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn2=neuralnet(calificacion ~., data=Train, hidden=10, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val3.notas_m$calificacion,model.matrix(calificacion~., data=Val3.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn2,Validate)
predictedNN2=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN2<-confusionMatrix(Val3.notas_m$calificacion, predictedNN2)
precisionNN_m<-c(precisionNN_m, matrizNN2$overall[1])
Train=data.frame(Train3.notas_m$calificacion,model.matrix(calificacion~., data=Train3.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn2=neuralnet(calificacion ~., data=Train, hidden=15, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val3.notas_m$calificacion,model.matrix(calificacion~., data=Val3.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn2,Validate)
predictedNN2=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN2<-confusionMatrix(Val3.notas_m$calificacion, predictedNN2)
precisionNN_m<-c(precisionNN_m, matrizNN2$overall[1])
Train=data.frame(Train3.notas_m$calificacion,model.matrix(calificacion~., data=Train3.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn2=neuralnet(calificacion ~., data=Train, hidden=20, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val3.notas_m$calificacion,model.matrix(calificacion~., data=Val3.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn2,Validate)
predictedNN2=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN2<-confusionMatrix(Val3.notas_m$calificacion, predictedNN2)
precisionNN_m<-c(precisionNN_m, matrizNN2$overall[1])
Train=data.frame(Train3.notas_m$calificacion,model.matrix(calificacion~., data=Train3.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn2=neuralnet(calificacion ~., data=Train, hidden=30, act.fct = "logistic", linear.output = FALSE)
Validate=data.frame(Val3.notas_m$calificacion,model.matrix(calificacion~., data=Val3.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn2,Validate)
predictedNN2=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN2<-confusionMatrix(Val3.notas_m$calificacion, predictedNN2)
precisionNN_m<-c(precisionNN_m, matrizNN2$overall[1])
names(precisionNN_m)<-c("5 neuronas", "10 neuronas", "15 neuronas", "20 neuronas","30 neuronas")
precisionNN_m
Train=data.frame(Train3.notas_m$calificacion,model.matrix(calificacion~., data=Train3.notas_m)[,-1])
colnames(Train)[1]="calificacion"
nn21=neuralnet(calificacion ~., data=Train, hidden=c(5,5), act.fct = "logistic", linear.output = FALSE)
plot(nn21)
Validate=data.frame(Val3.notas_m$calificacion,model.matrix(calificacion~., data=Val3.notas_m)[,-1])
colnames(Validate)[1]="calificacion"
Predict=compute(nn21,Validate)
predictedNN21=factor(Predict$net.result[,1]>0.5, labels = c("aprobado", "suspenso"))
matrizNN21<-confusionMatrix(Val3.notas_m$calificacion, predictedNN21)
matrizNN21
precision_m3<-c(precision_m3, max(precisionNN_m))
names(precision_m3)[2]<-c("Redes Neuronales")
fitsvm11 <-svm(calificacion ~., data = Train3.notas_p)
summary(fitsvm11)
predictedSVM = predict(fitsvm11,Val3.notas_p)
matrizSVM11<-confusionMatrix(Val3.notas_p$calificacion, predictedSVM)
matrizSVM11
precisionSVM_p<-c(matrizSVM11$overall[1])
names(precisionSVM_p)<-c("radial")
fitsvm12 <-svm(calificacion ~., data = Train3.notas_p, kernel="polynomial")
summary(fitsvm12)
predictedSVM = predict(fitsvm12,Val3.notas_p)
matrizSVM12<-confusionMatrix(Val3.notas_p$calificacion, predictedSVM)
matrizSVM12
precisionSVM_p<-c(precisionSVM_p, matrizSVM12$overall[1])
names(precisionSVM_p)[2]<-c("polinomial")
fitsvm13 <-svm(calificacion ~., data = Train3.notas_p, kernel="sigmoid")
summary(fitsvm13)
predictedSVM = predict(fitsvm13,Val3.notas_p)
matrizSVM13<-confusionMatrix(Val3.notas_p$calificacion, predictedSVM)
matrizSVM13
precisionSVM_p<-c(precisionSVM_p, matrizSVM13$overall[1])
names(precisionSVM_p)[3]<-c("sigmoidal")
fitsvm14 <-svm(calificacion ~., data = Train3.notas_p, kernel="linear")
summary(fitsvm14)
predictedSVM = predict(fitsvm14,Val3.notas_p)
matrizSVM14<-confusionMatrix(Val3.notas_p$calificacion, predictedSVM)
matrizSVM14
precisionSVM_p<-c(precisionSVM_p, matrizSVM14$overall[1])
names(precisionSVM_p)[4]<-c("lineal")
precisionSVM_p
precision_p3<-c(precision_p3, max(precisionSVM_p))
names(precision_p3)[3]<-c("SVM")
fitsvm21 <-svm(calificacion ~., data = Train3.notas_m)
predictedSVM = predict(fitsvm21,Val3.notas_m)
matrizSVM21<-confusionMatrix(Val3.notas_m$calificacion, predictedSVM)
matrizSVM21
precisionSVM_m<-c(matrizSVM21$overall[1])
names(precisionSVM_m)<-c("radial")
fitsvm22 <-svm(calificacion ~., data = Train3.notas_m, kernel="polynomial")
predictedSVM = predict(fitsvm22,Val3.notas_m)
matrizSVM22<-confusionMatrix(Val3.notas_m$calificacion, predictedSVM)
matrizSVM22
precisionSVM_m<-c(precisionSVM_m, matrizSVM22$overall[1])
names(precisionSVM_m)[2]<-c("polinomial")
fitsvm23 <-svm(calificacion ~., data = Train3.notas_m, kernel="sigmoid")
predictedSVM = predict(fitsvm23,Val3.notas_m)
matrizSVM23<-confusionMatrix(Val3.notas_m$calificacion, predictedSVM)
matrizSVM23
precisionSVM_m<-c(precisionSVM_m, matrizSVM23$overall[1])
names(precisionSVM_m)[3]<-c("sigmoidal")
fitsvm24 <-svm(calificacion ~., data = Train3.notas_m, kernel="linear")
predictedSVM = predict(fitsvm24,Val3.notas_m)
matrizSVM24<-confusionMatrix(Val3.notas_m$calificacion, predictedSVM)
matrizSVM24
precisionSVM_m<-c(precisionSVM_m, matrizSVM24$overall[1])
names(precisionSVM_m)[4]<-c("lineal")
precisionSVM_m
precision_m3<-c(precision_m3, max(precisionSVM_m))
names(precision_m3)[3]<-c("SVM")
fitbayes1 <-naiveBayes(calificacion ~., data = Train3.notas_p)
predictedBayes= predict(fitbayes1,Val3.notas_p)
matrizNB1<-confusionMatrix(Val3.notas_p$calificacion, predictedBayes)
matrizNB1
precision_p3<-c(precision_p3, matrizNB1$overall[1])
names(precision_p3)[4]<-c("Naive Bayes")
fitbayes2 <-naiveBayes(calificacion ~., data = Train3.notas_m)
predictedBayes= predict(fitbayes2,Val3.notas_m)
matrizNB2<-confusionMatrix(Val3.notas_m$calificacion, predictedBayes)
matrizNB2
precision_m3<-c(precision_m3, matrizNB2$overall[1])
names(precision_m3)[4]<-c("Naive Bayes")
tree11 = tree(calificacion~., data = Train3.notas_p)
summary(tree11)
plot(tree11)
text(tree11, pretty = 1)
predicedtree = predict(tree11, Val3.notas_p, type="class")
matriztree11<-confusionMatrix(Val3.notas_p$calificacion, predicedtree)
matriztree11
cv.tree11 = cv.tree(tree11, FUN = prune.misclass)
plot(cv.tree11)
prune.tree11 = prune.misclass(tree11, best = 5)
plot(prune.tree11)
text(prune.tree11, pretty=0)
predicedtree12 = predict(prune.tree11, Val3.notas_p, type="class")
matriztree12<-confusionMatrix(Val3.notas_p$calificacion, predicedtree12)
matriztree12
precision_p3<-c(precision_p3, matriztree12$overall[1])
names(precision_p3)[5]<-c("Arbol de clasificación")
tree21 = tree(calificacion~., data = Train3.notas_m)
summary(tree21)
plot(tree21)
text(tree21, pretty = 1)
predicedtree = predict(tree21, Val3.notas_m, type="class")
matriztree21<-confusionMatrix(Val3.notas_m$calificacion, predicedtree)
matriztree21
cv.tree21 = cv.tree(tree21, FUN = prune.misclass)
plot(cv.tree21)
prune.tree21 = prune.misclass(tree21, best = 3)
plot(prune.tree21)
text(prune.tree21, pretty=0)
predicedtree22 = predict(prune.tree21, Val3.notas_m, type="class")
matriztree22<-confusionMatrix(Val3.notas_m$calificacion, predicedtree22)
matriztree22
precision_m3<-c(precision_m3, matriztree22$overall[1])
names(precision_m3)[5]<-c("Arbol de clasificación")
precision_p<-rbind(precision_p1, precision_p2, precision_p3)
rownames(precision_p)<-c("RL", "RN", "SVM", "NB", "AC")
precision_p1
precision_p2
precision_p3
precision_m1
precision_m2
precision_m3
precsion_p
precision_p
precision_p<-rbind(precision_p1, precision_p2, precision_p3)
rownames(precision_p)<-c("Sin G1 y G2", "Con G1 y sin G2", "Con G1 y G2")
precision_m<-rbind(precision_m1, precision_m2, precision_m3)
rownames(precision_m)<-c("Sin G1 y G2", "Con G1 y sin G2", "Con G1 y G2")
precision_p
precision_m
